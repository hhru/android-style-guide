apply from: "${rootDir}/android-style-guide/tools/static-analysis/gradle/commonHttpStaticAnalysis.gradle"
apply from: "${rootDir}/android-style-guide/tools/static-analysis/gradle/detektTasks.gradle"

repositories {
    maven { url "http://dl.bintray.com/touchin/touchin-tools" }
    jcenter()
}

dependencies {
    pmd 'net.sourceforge.pmd:pmd-core:5.5.3'
    pmd 'net.sourceforge.pmd:pmd-java:5.5.3'

    checkstyle 'ru.touchin:checkstyle:7.6.2-fork'

//    cpd 'de.aaschmid:gradle-cpd-plugin:1.0'

    detekt 'io.gitlab.arturbosch.detekt:detekt-cli:1.0.0.RC9.2'
}
gradle.projectsEvaluated {
    task staticAnalysis {
        group = 'headhunter'

        doLast {
            def getParameters = { String profile ->
                def properties = rootProject.hasProperty("anlysators") ? rootProject.ext.anlysators : null

                if (properties != null && properties.containsKey(profile)) {
                    return properties.get(profile)
                }

                return properties
            }

            def useProfile = rootProject.hasProperty("useProfile") ?
                    rootProject.getProperties().get("useProfile") : null
            def analysatorParameters = getParameters(useProfile)
            def excludesAnalysers = analysatorParameters ? analysatorParameters["staticAnalysisExcludes"] : []

            generateHtmlReport(true, excludesAnalysers)
        }
    }

    staticAnalysis.dependsOn {
        def getParameters = { String profile ->
            def properties = rootProject.hasProperty("anlysators") ? rootProject.ext.anlysators : null

            if (properties != null && properties.containsKey(profile)) {
                return properties.get(profile)
            }

            return properties
        }

        def getAndroidProjectSources = { excl ->
            def sources = new ArrayList<String>()
            for (def project : rootProject.subprojects) {
                if (!project.subprojects.isEmpty() || (excl != null && excl.contains(project.path))) {
                    continue
                }

                def sourcesDirectory = new File(project.projectDir.path, 'src')
                if (!sourcesDirectory.exists() || !sourcesDirectory.isDirectory()) {
                    continue
                }

                for (def sourceFlavorDirectory : sourcesDirectory.listFiles()) {
                    def javaSourceDirectory = new File(sourceFlavorDirectory.path, 'java')
                    def kotlinSourceDirectory = new File(sourceFlavorDirectory.path, 'kotlin')

                    if (javaSourceDirectory.exists() && javaSourceDirectory.isDirectory()) {
                        sources.add(javaSourceDirectory.absolutePath)
                    }
                    if (kotlinSourceDirectory.exists() && kotlinSourceDirectory.isDirectory()) {
                        sources.add(kotlinSourceDirectory.absolutePath)
                    }
                }
            }
            return sources
        }

        def useProfile = rootProject.hasProperty("useProfile") ?
                rootProject.getProperties().get("useProfile") : null
        def excludes = rootProject.extensions.findByName("pathExludes")
        def analysatorParameters = getParameters(useProfile)

        getStaticAnalysisTaskNames(true, analysatorParameters, getAndroidProjectSources(excludes))
    }

}
gradle.projectsEvaluated {

    tasks.withType(JavaCompile) {
        options.compilerArgs <<
                "-Xlint:cast" <<
                "-Xlint:divzero" <<
                "-Xlint:empty" <<
                "-Xlint:deprecation" <<
                "-Xlint:finally" <<
                "-Xlint:overrides" <<
                "-Xlint:path" <<
                "-Werror"
    }

    def useProfile = rootProject.hasProperty("useProfile") ?
            rootProject.getProperties().get("useProfile") : null
    def excludes = rootProject.extensions.findByName("pathExludes")
//    def analysatorParameters = getParameters(useProfile)
//    def excludesAnalysers = analysatorParameters ? analysatorParameters["staticAnalysisExcludes"] : []

//    def androidStaticAnalysisTasks = getStaticAnalysisTaskNames(true, analysatorParameters, getAndroidProjectSources(excludes))

    def generateDetektConfigTask = generateDetektDefaultConfig()
    def generateDetektBaselineTask = generateDetektBaseline()


    task generateDetektConfig {
        group = 'headhunter'

        dependsOn generateDetektConfigTask
    }


    task generateLintBaseline {
//        def lintBaselinePath = analysatorParameters ? analysatorParameters["lintBaselinePath"] : ""
//        def lintConfigPath = analysatorParameters ? analysatorParameters["lintConfigPath"] : ""
//        def lintAdditionalProjectFilter = analysatorParameters ? analysatorParameters["lintAdditionalProjectFilter"] : ""
//        def lintAdditionalTaskFilter = analysatorParameters ? analysatorParameters["lintAdditionalTaskFilter"] : ""
//
//        def tasks = generateLintBaseline(lintBaselinePath, lintConfigPath, lintAdditionalProjectFilter, lintAdditionalTaskFilter)
//        dependsOn tasks
    }

    task generateDetektBaseline {
        group = 'headhunter'

        dependsOn generateDetektBaselineTask
    }

    task checkMyScript {
    }
}
