requiredParams:
  name: HeadHunter Container Fragment
  description: Creates HeadHunter Container Fragment

widgets:
  - stringParameter:
      id: featureName
      name: Feature name
      help: The name of your feature as base for generating container
      constraints:
        - class
        - nonempty
        - unique
      default: BaseFlow

globals:
  - stringParameter:
      id: featureFacadeName
      value: ${featureName}Facade

  - stringParameter:
      id: featureDepsName
      value: ${featureName}Deps

  - stringParameter:
      id: containerFragmentName
      value: ${featureName}ContainerFragment

  - stringParameter:
      id: containerFragmentLayoutName
      value: ${containerFragmentName.fragmentToLayout()}

  - stringParameter:
      id: containerFragmentContainerId
      value: ${containerFragmentLayoutName}

  - stringParameter:
      id: containerFragmentModuleName
      value: ${featureName}ContainerModule

  - stringParameter:
      id: containerFragmentNavigatorName
      value: ${featureName}ContainerNavigator

  - stringParameter:
      id: containerFragmentVMName
      value: ${featureName}ContainerVM

  - stringParameter:
      id: containerFragmentNavScreenName
      value: ${featureName}ContainerNavScreen

recipe:
  # kotlin files
  - instantiateAndOpen:
      from: root/src/app_package/ui/container/ContainerFragment.kt.ftl
      to: ${srcOut}/ui/container/${containerFragmentName}.kt
  - instantiateAndOpen:
      from: root/src/app_package/ui/container/ContainerFragmentNavigator.kt.ftl
      to: ${srcOut}/ui/container/${containerFragmentNavigatorName}.kt
  - instantiateAndOpen:
      from: root/src/app_package/ui/container/ContainerFragmentNavScreen.kt.ftl
      to: ${srcOut}/ui/container/${containerFragmentNavScreenName}.kt
  - instantiateAndOpen:
      from: root/src/app_package/ui/container/ContainerFragmentVM.kt.ftl
      to: ${srcOut}/ui/container/${containerFragmentVMName}.kt
  - instantiateAndOpen:
      from: root/src/app_package/ui/container/di/ContainerFragmentModule.kt.ftl
      to: ${srcOut}/ui/container/di/${containerFragmentModuleName}.kt
  # layouts
  - instantiateAndOpen:
      from: root/res/layout/container_fragment.xml.ftl
      to: ${resOut}/layout/${containerFragmentLayoutName}.xml
  # dependencies
  - addDependencies:
      # projects
      - compileOnly: :shared-core-ui
      - compileOnly: :core-mvvm
      - compileOnly: :shared-core-rx
      - compileOnly: :shared-core-logger
      # libraries
      - compileOnly: Libs.kotlin
      - compileOnly: Libs.toothpick.core
      - kapt: Libs.toothpick.compiler
      - compileOnly: Libs.ui.cicerone
