requiredParams:
  name: HeadHunter Fragment + ViewModel
  description: Creates Fragment + ViewModel

widgets:
  - stringParameter:
      id: fragmentPrefix
      name: Fragment Prefix
      help: Prefix of the fragment and other classes to create
      constraints:
        - nonempty
        - unique
        - class
      default: Blank

  - booleanParameter:
      id: needToolbar
      name: Need toolbar?
      help: If true, add toolbar to layout and fragment
      default: false

  - booleanParameter:
      id: needZeroStateView
      name: Need ZeroStateView?
      help: If true, add ZeroStateView to layout
      default: false

  - booleanParameter:
      id: needRecyclerView
      name: Need RecyclerView?
      help: If true, add RecyclerView and adapter delegate
      default: false

  - booleanParameter:
      id: useMviViewModel
      name: Use MviViewModel?
      help: If true, the MviViewModel will be generated
      default: false

  - stringParameter:
      id: mviStateName
      name: MVI state class name
      help: MVI state class name
      default: MviStateName
      visibility: ${useMviViewModel}

  - stringParameter:
      id: mviNewsName
      name: MVI news class name
      help: MVI news class name
      default: MviNewsName
      visibility: ${useMviViewModel}

globals:
  - stringParameter:
      id: fragmentPackage
      value: ${fragmentPrefix.camelCaseToUnderlines()}

  - stringParameter:
      id: fragmentName
      value: ${fragmentPrefix}Fragment

  - stringParameter:
      id: fragmentLayoutResName
      value: ${fragmentName.fragmentToLayout()}

  - stringParameter:
      id: paramsName
      value: ${fragmentPrefix}Params

  - stringParameter:
      id: moduleName
      value: ${fragmentPrefix}Module

  - stringParameter:
      id: uiStateName
      value: ${fragmentPrefix}UiState

  - stringParameter:
      id: uiEventName
      value: ${fragmentPrefix}UiEvent

  - stringParameter:
      id: viewModelName
      value: ${fragmentPrefix}ViewModel

recipe:
  - instantiate:
      from: root/res/layout/fragment.xml.ftl
      to: ${resOut}/layout/${fragmentLayoutResName}.xml

  - instantiateAndOpen:
      from: root/src/app_package/ViewModel.kt.ftl
      to: ${srcOut}/${fragmentPackage}/${viewModelName}.kt

  - instantiateAndOpen:
      from: root/src/app_package/Fragment.kt.ftl
      to: ${srcOut}/${fragmentPackage}/${fragmentName}.kt

  - instantiate:
      from: root/src/app_package/model/Params.kt.ftl
      to: ${srcOut}/${fragmentPackage}/model/${paramsName}.kt

  - instantiate:
      from: root/src/app_package/Module.kt.ftl
      to: ${srcOut}/${fragmentPackage}/${moduleName}.kt

  - instantiate:
      from: root/src/app_package/model/UiEvent.kt.ftl
      to: ${srcOut}/${fragmentPackage}/model/${uiEventName}.kt

  - instantiate:
      from: root/src/app_package/model/UiState.kt.ftl
      to: ${srcOut}/${fragmentPackage}/model/${uiStateName}.kt

  - addDependencies:
      - implementation: :shared-core-ui
      - implementation: :shared-core-ui-design-system
      - compileOnly: Libs.support.materialComponents
      - compileOnly: :core-mvvm
      - compileOnly: Libs.support.appCompat
      - compileOnly: :shared-core-di
      - compileOnly: Libs.toothpick.core
      - compileOnly: Libs.toothpick.ktp
      - kapt: Libs.toothpick.compiler

  - predicate:
      validIf: ${useMviViewModel}
      commands:
        - addDependencies:
            - compileOnly: Libs.rx.rxJava
            - compileOnly: Libs.rx.rxKotlin
            - compileOnly: :shared-core-rx

  - predicate:
      validIf: ${needRecyclerView}
      commands:
        - addDependencies:
            - compileOnly: :delegation-adapter
